import { useState } from "react";
import { Node, Edge } from "reactflow";
import {
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
} from "@/components/ui/sheet";
import { Button } from "./ui/button";
import { ScrollArea } from "./ui/scroll-area";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { generateDaoContracts as generatePlaceholderContracts } from "@/lib/contract-generator";
import { generateFinalContractsFromAI } from "@/lib/gemini";
import { uploadJsonToIpfs } from "@/lib/ipfs";
import { showSuccess, showError, showLoading, dismissToast } from "@/utils/toast";
import { Bot, FileCode, Loader, AlertTriangle, UploadCloud, PenSquare, Rocket } from "lucide-react";
import { useAccount, useWriteContract, useWalletClient, usePublicClient } from "wagmi";
import { daoRegistryAddress, daoRegistryAbi } from "@/lib/contracts";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Separator } from "./ui/separator";
import { deployToken, deployGovernor } from "@/lib/deployment";

interface DeploymentPanelProps {
  nodes: Node[];
  edges: Edge[];
}

export const DeploymentPanel = ({ nodes, edges }: DeploymentPanelProps) => {
  const [contracts, setContracts] = useState<{ filename: string, code: string }[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [isUploading, setIsUploading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [ipfsCid, setIpfsCid] = useState<string | null>(null);
  const [daoAddress, setDaoAddress] = useState('');
  const [isDeploying, setIsDeploying] = useState(false);
  const [deploymentStatus, setDeploymentStatus] = useState<string[]>([]);

  const { isConnected } = useAccount();
  const { data: walletClient } = useWalletClient();
  const publicClient = usePublicClient();
  const { writeContract, isPending: isRegistering, data: hash } = useWriteContract();

  const handleGenerateContracts = async () => {
    setIsGenerating(true);
    setError(null);
    setContracts([]);
    setIpfsCid(null);

    try {
      const placeholders = generatePlaceholderContracts(nodes, edges);
      if (placeholders.length === 0) {
        throw new Error("No contracts could be generated. Please add and connect nodes on the canvas.");
      }
      const finalContracts = await generateFinalContractsFromAI(nodes, edges, placeholders);
      setContracts(finalContracts);
    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : "An unknown error occurred.";
      setError(errorMessage);
      console.error(e);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleFullDeploy = async () => {
    if (!walletClient || !publicClient) {
      showError("Wallet not connected or configured properly.");
      return;
    }

    setIsDeploying(true);
    setDeploymentStatus([]);
    const toastId = showLoading("Starting DAO deployment...");

    try {
      // Step 1: Deploy Token
      const tokenNode = nodes.find(n => n.type === 'token');
      if (!tokenNode) throw new Error("Token node not found in canvas.");
      
      setDeploymentStatus(prev => [...prev, "Deploying Governance Token..."]);
      const tokenAddress = await deployToken(walletClient, publicClient, tokenNode);
      setDeploymentStatus(prev => [...prev, `Token deployed at: ${tokenAddress}`]);
      showSuccess("Token contract deployed!");

      // Step 2: Deploy Governor (and others in sequence)
      // This is a simplified flow. A full implementation would deploy all contracts.
      setDeploymentStatus(prev => [...prev, "Deploying Governor..."]);
      const governorAddress = await deployGovernor(tokenAddress);
      setDeploymentStatus(prev => [...prev, `Governor deployed at: ${governorAddress}`]);
      showSuccess("Governor contract deployed!");
      setDaoAddress(governorAddress); // Assuming Governor is the main DAO address

      // Final Step: Register
      setDeploymentStatus(prev => [...prev, "DAO Deployed! Please upload to IPFS and register."]);
      dismissToast(toastId);
      showSuccess("Core contracts deployed successfully!");

    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : "An unknown error occurred during deployment.";
      dismissToast(toastId);
      showError(errorMessage);
      setError(errorMessage);
    } finally {
      setIsDeploying(false);
    }
  };

  const handleUploadToIpfs = async () => {
    if (!daoAddress.startsWith('0x') || daoAddress.length !== 42) {
      showError("Please enter or deploy a valid DAO contract address.");
      return;
    }
    setIsUploading(true);
    const toastId = showLoading("Uploading DAO information to IPFS...");
    try {
      const metadata = {
        name: "AI Generated DAO",
        description: "DAO configuration generated by AI DAO Creator",
        daoAddress,
        nodes,
        edges,
        contracts,
      };
      const cid = await uploadJsonToIpfs(metadata);
      setIpfsCid(cid);
      dismissToast(toastId);
      showSuccess("DAO information uploaded successfully!");
    } catch (e) {
      const errorMessage = e instanceof Error ? e.message : "An unknown error occurred.";
      dismissToast(toastId);
      showError(errorMessage);
    } finally {
      setIsUploading(false);
    }
  };

  const handleRegisterDao = () => {
    if (!daoAddress.startsWith('0x') || daoAddress.length !== 42) {
      showError("Please enter a valid Ethereum address.");
      return;
    }
    if (!ipfsCid) {
      showError("IPFS CID not found. Please upload first.");
      return;
    }
    if (!isConnected) {
      showError("Please connect your wallet to register the DAO.");
      return;
    }

    writeContract({
      address: daoRegistryAddress,
      abi: daoRegistryAbi,
      functionName: 'registerDAO',
      args: [daoAddress as `0x${string}`, ipfsCid],
    }, {
      onSuccess: (txHash) => {
        showSuccess(`DAO registration submitted!`);
        console.log("Transaction Hash:", txHash);
      },
      onError: (error) => {
        showError(error.shortMessage || "An error occurred during registration.");
      }
    });
  };

  const renderContent = () => {
    // ... (existing renderContent logic remains the same)
    if (isGenerating) {
      return (
        <div className="text-center p-8 border rounded-lg bg-muted h-full flex flex-col justify-center items-center">
          <Loader className="h-12 w-12 mb-4 text-primary animate-spin" />
          <p className="text-sm text-muted-foreground">
            AI is writing your smart contracts...
          </p>
        </div>
      );
    }

    if (error) {
      return (
        <div className="text-center p-8 border rounded-lg bg-destructive/10 border-destructive/50 h-full flex flex-col justify-center items-center">
          <AlertTriangle className="h-12 w-12 mb-4 text-destructive" />
          <p className="text-sm font-semibold text-destructive">Generation Failed</p>
          <p className="text-xs text-destructive/80 mt-2">{error}</p>
        </div>
      );
    }

    if (contracts.length === 0) {
      return (
        <div className="text-center p-8 border rounded-lg bg-muted h-full flex flex-col justify-center items-center">
          <Bot className="h-12 w-12 mb-4 text-muted-foreground" />
          <p className="text-sm text-muted-foreground">
            Your generated smart contracts will appear here.
          </p>
        </div>
      );
    }

    return (
      <Tabs defaultValue={contracts[0].filename} className="h-full flex flex-col">
        <TabsList>
          {contracts.map(contract => (
            <TabsTrigger key={contract.filename} value={contract.filename}>
              {contract.filename}
            </TabsTrigger>
          ))}
        </TabsList>
        {contracts.map(contract => (
          <TabsContent key={contract.filename} value={contract.filename} className="flex-1 overflow-hidden">
            <ScrollArea className="h-full">
              <pre className="text-xs bg-muted p-4 rounded-md">
                <code>{contract.code}</code>
              </pre>
            </ScrollArea>
          </TabsContent>
        ))}
      </Tabs>
    );
  };

  return (
    <SheetContent className="w-[500px] sm:w-[640px] flex flex-col">
      <SheetHeader>
        <SheetTitle>Deploy DAO</SheetTitle>
        <SheetDescription>
          Generate, deploy, and register your DAO, all from this panel.
        </SheetDescription>
      </SheetHeader>
      
      <Tabs defaultValue="deploy" className="flex-1 flex flex-col overflow-hidden py-4">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="deploy">1. Deploy Contracts</TabsTrigger>
          <TabsTrigger value="register">2. Register DAO</TabsTrigger>
        </TabsList>
        <TabsContent value="deploy" className="flex-1 flex flex-col overflow-hidden pt-4 space-y-4">
          <Button onClick={handleFullDeploy} className="w-full" disabled={isDeploying || !isConnected}>
            {isDeploying ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <Rocket className="mr-2 h-4 w-4" />}
            Deploy All Contracts
          </Button>
          {deploymentStatus.length > 0 && (
            <div className="p-4 border rounded-lg bg-muted/40 flex-1 overflow-y-auto">
              <h3 className="font-semibold mb-2">Deployment Progress:</h3>
              <ul className="text-xs space-y-1 list-disc list-inside">
                {deploymentStatus.map((status, index) => (
                  <li key={index} className="break-all">{status}</li>
                ))}
              </ul>
            </div>
          )}
        </TabsContent>
        <TabsContent value="register" className="flex-1 flex flex-col overflow-hidden pt-4 space-y-4">
          <Button onClick={handleGenerateContracts} className="w-full" disabled={isGenerating || isUploading || isRegistering}>
            {isGenerating ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <FileCode className="mr-2 h-4 w-4" />}
            Generate Contract Code (for IPFS)
          </Button>
          <div className="flex-1 overflow-hidden">
            {renderContent()}
          </div>
          <Separator />
          <div className="space-y-2">
            <Label htmlFor="dao-address">DAO Contract Address</Label>
            <Input 
              id="dao-address" 
              placeholder="This will be filled after deployment" 
              value={daoAddress}
              onChange={(e) => setDaoAddress(e.target.value)}
              disabled={isRegistering || isUploading}
            />
          </div>
          <Button onClick={handleUploadToIpfs} className="w-full" disabled={isUploading || isGenerating || isRegistering || !daoAddress.trim()}>
            {isUploading ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <UploadCloud className="mr-2 h-4 w-4" />}
            Upload Info to IPFS
          </Button>
          {ipfsCid && (
            <>
              <p className="text-xs text-muted-foreground break-all text-center">
                IPFS CID: {ipfsCid}
              </p>
              <Button 
                onClick={handleRegisterDao} 
                className="w-full" 
                disabled={isRegistering || !daoAddress.trim() || !isConnected}
              >
                {isRegistering ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <PenSquare className="mr-2 h-4 w-4" />}
                Register DAO On-Chain
              </Button>
            </>
          )}
          {hash && (
            <div className="text-center">
              <p className="text-xs text-muted-foreground">
                Transaction sent! <a href={`https://sepolia.etherscan.io/tx/${hash}`} target="_blank" rel="noopener noreferrer" className="underline">View on Etherscan</a>
              </p>
            </div>
          )}
        </TabsContent>
      </Tabs>
    </SheetContent>
  );
};